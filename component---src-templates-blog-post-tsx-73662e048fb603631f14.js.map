{"version":3,"file":"component---src-templates-blog-post-tsx-73662e048fb603631f14.js","mappings":"kQAoDMA,GAAO,cAAH,mBAAG,CAAH,yFAOV,IApD2B,WACzB,IAgBA,GAhBaC,EAAAA,EAAAA,gBAAe,cAgBIC,KAAKC,aAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAEhB,OACE,QAACL,EAAD,MACE,QAAC,EAAAM,EAAD,CACEC,IAAI,2EACJC,IAAKJ,EACLK,YAAY,UACZC,OAAO,QACPC,MAAO,GACPC,IAAG,EANL,uBAaA,oBACE,kBACE,aAAGC,KAAI,uBAAyBR,EAAOS,SAAYV,EAAOW,QAE5D,iBAAIX,EAAOY,a,gHCgBnB,UAnDwC,SAAC,GAAoC,IAAlCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACtDC,EAAOH,EAAKI,eACZC,EAAYL,EAAKf,KAAKC,aAAaoB,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,QAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,IACjC,QAAC,IAAD,CAAKC,MAAOH,EAAKM,YAAYH,MAAOI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,WACtF,mBAASC,UAAU,iBACjB,eAAKA,UAAU,eACb,cAAIC,SAAS,YAAYV,EAAKM,YAAYH,QAC1C,aAAGM,UAAU,cACX,QAAC,IAAD,CAAiBE,KAAMC,EAAAA,MACtBZ,EAAKM,YAAYO,QAGtB,mBAASC,wBAAyB,CAAEC,OAAQf,EAAKgB,MAAQN,SAAS,kBAIpE,oBACE,cACEO,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,KAEX,kBACGlB,IACC,QAAC,EAAAmB,KAAD,CAAMC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACKvB,EAASE,YAAYH,SAK9B,kBACGE,IACC,QAAC,EAAAkB,KAAD,CAAMC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKC,YAAYH,MADpB,UAOR,QAAC,IAAD,S","sources":["webpack://ryoga.dev/./src/components/molecules/bio.tsx","webpack://ryoga.dev/./src/templates/blog-post.tsx"],"sourcesContent":["import { useStaticQuery, graphql } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport React from 'react';\n\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nconst Bio: React.FC<any> = () => {\n  const data = useStaticQuery(graphql`\n    query Bio {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  const { author, social } = data.site.siteMetadata;\n\n  return (\n    <Base>\n      <StaticImage\n        src='https://raw.githubusercontent.com/Ryoga-exe/Ryoga-exe/main/icon/icon.jpg'\n        alt={author}\n        placeholder='blurred'\n        layout='fixed'\n        width={60}\n        css={css`\n          margin-bottom: 0;\n          margin-right: 1.2rem;\n          min-width: 60px;\n          border-radius: 50%;\n        `}\n      />\n      <div>\n        <p>\n          <a href={`https://twitter.com/${social.twitter}`}>{author.name}</a>\n        </p>\n        <p>{author.summary}</p>\n      </div>\n    </Base>\n  );\n};\n\n// justify-content: center;\nconst Base = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin-bottom: 0;\n`;\n\nexport default Bio;\n","import { Link, graphql } from 'gatsby';\nimport React from 'react';\n\nimport Layout from '@components/layout';\nimport Bio from '@components/molecules/bio';\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '@styles/blog-post.scss';\nimport SEO from '@utils/seo';\n\nconst BlogPostTemplate: React.FC<any> = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n  const { previous, next } = pageContext;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={post.frontmatter.title} description={post.frontmatter.description || post.excerpt} />\n      <article className='blog-article'>\n        <div className='blog-title'>\n          <h1 itemProp='headline'>{post.frontmatter.title}</h1>\n          <p className='post-date'>\n            <FontAwesomeIcon icon={faCalendarAlt} />\n            {post.frontmatter.date}\n          </p>\n        </div>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} itemProp='articleBody' />\n        {/*<section>{renderAst(post.htmlAst)}</section>*/}\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}>\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel='prev'>\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel='next'>\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <Bio />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY/MM/DD\")\n        description\n      }\n    }\n  }\n`;\n"],"names":["Base","useStaticQuery","site","siteMetadata","author","social","S","src","alt","placeholder","layout","width","css","href","twitter","name","summary","data","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","className","itemProp","icon","faCalendarAlt","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}