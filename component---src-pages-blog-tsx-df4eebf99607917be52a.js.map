{"version":3,"file":"component---src-pages-blog-tsx-df4eebf99607917be52a.js","mappings":"qMAwEA,UAxC4D,SAAC,GAAuB,IAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC7DC,EAAQF,EAAKG,kBAAkBC,MAErC,OACEC,EAAAA,EAAAA,IAACC,EAAAA,SAAD,MACED,EAAAA,EAAAA,IAACE,EAAAA,EAAD,CAAQN,SAAUA,IAChBI,EAAAA,EAAAA,IAACG,EAAAA,EAAD,CAAKC,MAAM,SACVP,EAAMQ,KAAI,YAAc,gBAAXC,EAAW,EAAXA,KACNF,GAAQ,UAAAE,EAAKC,cAAL,eAAaH,SAAb,UAAsBE,EAAKC,cAA3B,aAAsBC,EAAaC,MACjD,OACET,EAAAA,EAAAA,IAAAA,UAAAA,CAASU,IAAG,UAAEJ,EAAKC,cAAP,aAAEI,EAAaF,KAAMG,WAAS,EAACC,SAAS,8BAClDb,EAAAA,EAAAA,IAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAAA,KAAAA,MACEA,EAAAA,EAAAA,IAACc,EAAAA,KAAD,CAAMC,MAAO,CAAEC,UAAW,QAAUC,GAAE,UAAEX,EAAKC,cAAP,aAAEW,EAAaT,KAAMU,SAAS,QAClEnB,EAAAA,EAAAA,IAAAA,OAAAA,CAAMmB,SAAS,YAAYf,MAG/BJ,EAAAA,EAAAA,IAAAA,QAAAA,MACEA,EAAAA,EAAAA,IAACoB,EAAAA,EAAD,CAAiBC,KAAMC,EAAAA,MADzB,UAEGhB,EAAKC,cAFR,aAEGgB,EAAaC,QAGlBxB,EAAAA,EAAAA,IAAAA,UAAAA,MACEA,EAAAA,EAAAA,IAAAA,IAAAA,CACEyB,wBAAyB,CACvBC,QAAQ,UAAApB,EAAKC,cAAL,eAAaoB,cAAerB,EAAKsB,SAE3CT,SAAS,iBApBlB,KA2BDnB,EAAAA,EAAAA,IAAC6B,EAAAA,EAAD,OAlCR,C","sources":["webpack://ryoga.dev/./src/pages/blog.tsx"],"sourcesContent":["import { Link, graphql, PageProps } from 'gatsby';\nimport React from 'react';\n\nimport Layout from '@components/layout';\nimport Bio from '@components/molecules/bio';\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SEO from '@utils/seo';\n\ninterface BlogPostsIndexQuery {\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n  allMarkdownRemark: {\n    edges: [\n      {\n        node: {\n          excerpt: string;\n          fields: {\n            slug: string;\n            date: string;\n            title: string;\n            description: string;\n          };\n        };\n      }\n    ];\n  };\n}\n\nconst BlogIndex: React.FC<PageProps<BlogPostsIndexQuery>> = ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <React.Fragment>\n      <Layout location={location}>\n        <SEO title='Blog' />\n        {posts.map(({ node }) => {\n          const title = node.fields?.title || node.fields?.slug;\n          return (\n            <article key={node.fields?.slug} itemScope itemType='http://schema.org/Article'>\n              <header>\n                <h3>\n                  <Link style={{ boxShadow: `none` }} to={node.fields?.slug} itemProp='url'>\n                    <span itemProp='headline'>{title}</span>\n                  </Link>\n                </h3>\n                <small>\n                  <FontAwesomeIcon icon={faCalendarAlt} />\n                  {node.fields?.date}\n                </small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.fields?.description || node.excerpt,\n                  }}\n                  itemProp='description'\n                />\n              </section>\n            </article>\n          );\n        })}\n\n        <Bio />\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query BlogPostsIndex {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 1000, sort: { fields: [frontmatter___date], order: DESC }, filter: { frontmatter: { status: { eq: \"published\" } } }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            date(formatString: \"YYYY/MM/DD\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["data","location","posts","allMarkdownRemark","edges","___EmotionJSX","React","Layout","SEO","title","map","node","fields","_node$fields2","slug","key","_node$fields3","itemScope","itemType","Link","style","boxShadow","to","_node$fields4","itemProp","FontAwesomeIcon","icon","faCalendarAlt","_node$fields5","date","dangerouslySetInnerHTML","__html","description","excerpt","Bio"],"sourceRoot":""}